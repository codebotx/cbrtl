<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>project on cbrtl</title>
    <link>https://anubhavp.dev/cbrtl/tags/project/</link>
    <description>Recent content in project on cbrtl</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 27 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://anubhavp.dev/cbrtl/tags/project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Project: Zuzu</title>
      <link>https://anubhavp.dev/cbrtl/posts/zuzu/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://anubhavp.dev/cbrtl/posts/zuzu/</guid>
      <description>Zuzu is a static site generator that converts all your markdown files into static htmls pages. It uses Github falvoured Markdown CSS and highlight js to beautify code snippets.</description>
      <content:encoded><![CDATA[<h1 id="zuzu">Zuzu</h1>
<blockquote>
<p>Static Site Generator</p>
</blockquote>
<h3 id="zuzu-is-a-minimal-static-site-generator">Zuzu is a minimal static site generator.</h3>
<p>Zuzu converts all your markdown files into static htmls pages to be rendered quickly. It uses Github falvoured Markdown CSS and highlight js to beautify code snippets. <a href="https://anubhavp.me/blog">This blog</a>, for example, has been written using this generator. This enables noobs like me to write blogs without having to learn a lot of code! All you need to do is to write a markdown file and it will be rendered as a page ;)</p>
<h2 id="how-does-it-work-">How does it work ?</h2>
<p>Zuzu parses the markdown file using <em>javascript</em> and renders it as <em>html documents</em>. It then saves the html files in the <code>public</code> folder. The public folder, with <code>index.html</code> file, is the final output of the generator and this can be deployed and hosted in various platforms. This particular blog has been deployed on <a href="https://anubhavp.me/blog/">Github Pages</a>.</p>
<h3 id="1-create-a-markdown-file">1. Create a markdown file</h3>
<pre><code># This is a title
This is a paragraph
This is another paragraph
This is a list:
* Item 1
* Item 2
* Item 3
This is a code block:
```
print(&quot;Hello World&quot;)
```
This is a table:
| Column 1 | Column 2 | Column 3 |
| -------- | -------- | -------- |
| 1        | 2        | 3        |
| 4        | 5        | 6        |
| 7        | 8        | 9        |
This is a link: [zuzu](https://anubhavp.me/blog/zuzu.html)
</code></pre>
<h3 id="2-run-the-generator-and-find-your-blog">2. Run the generator and find your blog</h3>
<p>Run <code>npm run generate</code> in the console. Zuzu is also available as a CLI tool. You can install it using <code>npm install -g zuzu</code>. Then run <code>npx zuzussg</code> in the console. This will generate the html files in the <code>public</code> folder. You can then deploy the <code>public</code> folder to any hosting platform.
You&rsquo;ll now see the blog in the public folder! Run the index.html file in your browser to see your blog. You may now deploy your site
to a server. Zuzu also supports CI/CD. You can use Github Actions to automatically deploy your site to Github Pages.</p>
<h3 id="you-can-find-the-working-in-the-repo-herehttpsgithubcomcodebotxzuzu">You can find the working in the repo <a href="https://github.com/codebotx/zuzu/">here</a></h3>
<h4 id="to-do">To-do</h4>
<ul>
<li>Add another template file in the initial folder with index.html and respective assets.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Project: Vyse</title>
      <link>https://anubhavp.dev/cbrtl/posts/vyse/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://anubhavp.dev/cbrtl/posts/vyse/</guid>
      <description>A dynamically typed, interpreted and fast scriptling language inspired by Lua for rapid prototyping of applications like video games.</description>
      <content:encoded><![CDATA[<p>Sometime during my 2nd year in college, I&rsquo;d made a hobby programming language that turned out quite well.
It&rsquo;s named &ldquo;Vyse&rdquo;, after <a href="https://dota2.fandom.com/wiki/Scythe_of_Vyse">Guinsoo&rsquo;s Scythe of Vyse</a> from DotA.</p>
<p>Vyse is a dynamically typed, interpreted and fast scriptling language inspired by Lua for rapid prototyping of applications like video games.
Programmers familiar with Lua/Javascript can pick up the language within an hour.
Vyse also comes with a C++ API for frictionless embedding in projects.</p>
<p>Features include:</p>
<ul>
<li>Modules, both native and user-level</li>
<li>An embedding API</li>
<li>Closures, higher order functions to facilitate FP.</li>
<li>Prototypical inheritance, inspired from JS and Lua.</li>
</ul>
<p>Since the language already has detailed (but remarkably outdated) documentation on <a href="https://injuly.in/vyse">its website</a>,
I won&rsquo;t bother rewriting any of that here.</p>
<p>Instead, here is the simple number-guessing program:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rs" data-lang="rs"><span style="display:flex;"><span><span style="font-weight:bold">const</span> math = import(<span style="font-style:italic">&#34;math&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">fn</span> play() {
</span></span><span style="display:flex;"><span>  <span style="font-weight:bold">const</span> num = math.randint(0, 100)
</span></span><span style="display:flex;"><span>  <span style="font-weight:bold">let</span> guess = input(<span style="font-style:italic">&#34;guess: &#34;</span>):<span style="font-weight:bold">to_num</span>()
</span></span><span style="display:flex;"><span>  <span style="font-weight:bold">let</span> n_attempts = 1
</span></span><span style="display:flex;"><span>  <span style="font-weight:bold">while</span> guess != num {
</span></span><span style="display:flex;"><span>    <span style="font-weight:bold">if</span> guess &lt; num {
</span></span><span style="display:flex;"><span>      print(<span style="font-style:italic">&#34;Too low! Try higher.&#34;</span>)
</span></span><span style="display:flex;"><span>    } <span style="font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>      print(<span style="font-style:italic">&#34;Too high! Try lower.&#34;</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    n_attempts += 1
</span></span><span style="display:flex;"><span>    guess = input(<span style="font-style:italic">&#34;guess: &#34;</span>):<span style="font-weight:bold">to_num</span>()
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  print(<span style="font-style:italic">&#34;Well done! number of attempts: &#34;</span>, n_attempts)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>play()
</span></span></code></pre></div><p>Of course, it&rsquo;s possible to do more than just write simple terminal programs.
For instance, I&rsquo;m currently working on a <a href="https://github.com/cpp-gamedev/wex">2D game engine</a>
that will allow users to write games with the language.
This project hasn&rsquo;t seen any major progress in the past year owing to my busy (read: poorly managed) schedule,
however, I&rsquo;m looking to resume this project in the coming quarter.</p>
<p>Currently, there are no official releases for Vyse.
This is majorly due to me not being in possession of a windows (yuck) device ATM.
There are some bugs that I&rsquo;ve yet to prune out before I can make a stable v0.1 release for all platforms.</p>
<p>The one benefit of having no users, is a leisurely development pace.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
